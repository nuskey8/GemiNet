<#@ template language="C#" debug="false" hostspecific="true" #>
<#@ output extension=".g.cs" #>
<#@ assembly name="System.Text.Json" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.Json" #>
<#@ import namespace="System.Collections.Generic" #>
// <auto-generated/ >
#nullable enable

using System;
using System.Diagnostics.CodeAnalysis;
using System.IO;

namespace GemiNet;

internal static partial class Mime
{
    public static string GetMimeType(ReadOnlySpan<char> filePath, string defaultType = "application/octet-stream")
    {
        if (TryGetMimeType(filePath, out var mimeType)) return mimeType;
        return defaultType;
    }

    public static bool TryGetMimeType(ReadOnlySpan<char> filePath, [NotNullWhen(true)] out string? mimeType)
    {
        var temp = Path.GetExtension(filePath);
        Span<char> ext = stackalloc char[temp.Length];
        temp.ToLowerInvariant(ext);

        switch (ext)
        {
<# 
    var jsonPath = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), "mime.json");
    var json = File.ReadAllText(jsonPath);
    using var doc = JsonDocument.Parse(json);

    var extToMime = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);

    foreach (var prop in doc.RootElement.EnumerateObject())
    {
        var mime = prop.Name;
        if (prop.Value.TryGetProperty("extensions", out var exts))
        {
            foreach (var extElem in exts.EnumerateArray())
            {
                var extStr = extElem.GetString();
                if (!string.IsNullOrEmpty(extStr) && !extToMime.ContainsKey(extStr))
                {
                    extToMime[extStr] = mime;
                }
            }
        }
    }

    foreach (var kv in extToMime)
    {
#>
            case ".<#= kv.Key #>":
                mimeType = "<#= kv.Value #>";
                return true;
<#  } #>
            default:
                mimeType = null;
                return false;
        }
    }
}